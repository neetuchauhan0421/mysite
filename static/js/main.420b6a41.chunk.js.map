{"version":3,"sources":["components/Appbar.jsx","components/Card.jsx","components/Dashboard.jsx","containers/actions/userActions.js","containers/actions/types.js","Routes.js","containers/reducers/userReducer.js","containers/reducers/index.js","Store.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","grow","flexGrow","menuButton","marginRight","spacing","height","title","connect","state","user","withRouter","props","classes","className","AppBar","style","position","backgroundColor","Toolbar","IconButton","edge","color","aria-label","Typography","variant","noWrap","root","CardContent","display","flexDirection","alignItems","media","Card","CardActionArea","CardMedia","width","margin","image","product","restaurantImage","gutterBottom","restaurantName","longDescription","shortDescription","displayCostForTwo","rating","parseFloat","averageReview","starRatedColor","numberOfStars","starDimension","starSpacing","name","CardActions","Button","borderRadius","onClick","console","log","Dashboard","loading","componentDidMount","updatestate","requestOptions","method","headers","body","JSON","stringify","latitude","longitude","fetch","then","response","json","data","getlist","listRestaurants","setState","Appbar","Grid","container","marginTop","justifyContent","this","hotel_list","map","index","key","item","xs","sm","md","Component","dispatch","type","payload","Routes","exact","path","component","initialState","combineReducers","action","middleware","thunk","store","createStore","appReducer","compose","applyMiddleware","App","Store","basename","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.420b6a41.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {} from \"../containers/actions/userActions\";\nimport HomeIcon from \"@material-ui/icons/Home\";\n\nimport { AppBar, Toolbar, IconButton, Typography } from \"@material-ui/core\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n\n    height: \"50%\",\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction PrimarySearchAppBar(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.grow}>\n      <AppBar style={{ position: \"fixed\", backgroundColor: \"#000000\" }}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"home\">\n            <HomeIcon />\n          </IconButton>\n\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Food Life\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(withRouter(PrimarySearchAppBar));\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { getlist } from \"../containers/actions/userActions\";\nimport StarRatings from \"react-star-ratings\";\n\nconst useStyles = makeStyles({\n  root: {\n    //width: 349,\n    //height: 580,\n  },\n\n  CardContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  media: {\n    height: 400,\n  },\n});\n\nfunction MediaCard(props) {\n  const classes = useStyles();\n\n  function AddCartClick() {\n    console.log(\"l\");\n  }\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardActionArea>\n          <CardMedia\n            style={{ width: \"16rem\", margin: \"auto\" }}\n            className={classes.media}\n            image={props.product.restaurantImage}\n            // image={require(\"../assets\" + props.product.restaurantImage)}\n          />\n          <CardContent className={classes.CardContent}>\n            <Typography gutterBottom variant=\"body2\">\n              {props.product.restaurantName}\n            </Typography>\n            <Typography\n              gutterBottom\n              variant=\"body2\"\n              title={props.product.longDescription}>\n              {props.product.shortDescription}\n            </Typography>\n            <Typography variant=\"body1\">\n              {props.product.displayCostForTwo}\n            </Typography>\n            <StarRatings\n              rating={parseFloat(props.product.averageReview)}\n              starRatedColor=\"blue\"\n              numberOfStars={6}\n              starDimension=\"12px\"\n              starSpacing=\"5px\"\n              name=\"rating\"\n            />\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          <Button\n            variant=\"contained\"\n            style={{\n              color: \"#FFFFFF\",\n              backgroundColor: \"black\",\n              borderRadius: \"5px\",\n              width: \"100%\",\n            }}\n            onClick={() => AddCartClick()}>\n            ADD\n          </Button>\n        </CardActions>\n      </Card>\n    </>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(withRouter(MediaCard));\n","import React, { Component } from \"react\";\nimport Appbar from \"./Appbar\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getlist } from \"../containers/actions/userActions\";\nimport Card from \"./Card\";\nimport { Block } from \"styled-loaders-react\";\nclass Dashboard extends Component {\n  state = {\n    loading: true,\n  };\n  componentDidMount = () => {\n    this.updatestate();\n    // setTimeout(() => {\n    //   this.setState({\n    //     loading: false,\n    //   });\n    // }, 2000);\n    // this.setState({ loading: true });\n  };\n  constructor(props) {\n    super(props);\n  }\n\n  updatestate = () => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ latitude: 13.012345, longitude: 80.123456 }),\n    };\n    fetch(\n      \"https://eatoo.uberdoo.com/foodapp/public/api/guest/listRestaurant\",\n      requestOptions\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        this.props.getlist(data.listRestaurants);\n        // this.state = { loading: false };\n        this.setState({ loading: false });\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <Appbar />\n        <Grid\n          container\n          spacing={2}\n          style={{\n            marginTop: 80,\n            display: \"flex\",\n            justifyContent: \"space-between\",\n          }}>\n          <>\n            {this.state.loading ? (\n              <Block color=\"black\" />\n            ) : (\n              <>\n                (\n                {this.props.user.hotel_list.map(\n                  (product, index) => (\n                    // product ? (\n                    <Grid key={index} item xs={6} sm={3} md={3}>\n                      <Card product={product} />\n                    </Grid>\n                  )\n                  // ) : null\n                )}\n                )\n              </>\n            )}\n          </>\n        </Grid>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps, { getlist })(withRouter(Dashboard));\n","import { HOTEL_LIST } from \"./types\";\n\nexport const getlist = (data) => (dispatch) => {\n  dispatch({\n    type: HOTEL_LIST,\n    payload: data,\n  });\n};\n","export const HOTEL_LIST = \"hotel_list\";\r\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport Dashboard from \"./components/Dashboard\";\n\nconst Routes = () => (\n  <Switch>\n    <Route exact path=\"/\" name=\"Dashboard\" component={Dashboard} />\n  </Switch>\n);\n\nexport default Routes;\n\n","import { HOTEL_LIST } from \"../actions/types\";\r\nconst initialState = {\r\n  hotel_list: [],\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case HOTEL_LIST:\r\n      return {\r\n        ...state,\r\n        hotel_list: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport userReducer from \"./userReducer\";\r\n\r\n\r\nexport default combineReducers({\r\n  user: userReducer,\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport appReducer from \"./containers/reducers\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst rootReducer = (state, action) => {\n  return appReducer(state, action);\n};\n\nconst store =\n  process.env.NODE_ENV === \"development\"\n    ? createStore(\n        rootReducer,\n        initialState,\n        compose(applyMiddleware(...middleware))\n      )\n    : createStore(\n        rootReducer,\n        initialState,\n        compose(applyMiddleware(...middleware))\n      );\n\nexport default store;\n\n","import React from \"react\";\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\nimport Routes from \"./Routes\";\nimport Store from \"./Store\";\n\nfunction App() {\n  return (\n    <Provider store={Store}>\n      <BrowserRouter basename=\"mysite\">\n        <Routes />\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}